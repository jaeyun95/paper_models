# -*- coding: utf-8 -*-
"""decoder.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oha5NxEO322Vz6oDbBV2cozL9UDeuFpD
"""

import torch
import torch.nn as nn

class Decoder(nn.Module):
  def __init__(self):
    super().__init__()

    self.decoder_embedding = nn.Embedding()
    pos_table = torch.FloatTensor(get_sinusoid_encoding_table(word_sequence, hight))
    self.position_embedding = nn.Embedding.from_pretrained(pos_table, freeze=True)
    self.att_layers = nn.ModuleList([EncoderLayer() for _ in range(6)])

  def forward(self,encoder_input, decoder_input, dec_att_mask, dec_enc_att_mask):

    en_output = self.encoder(encoder_input)
    outputs = self.decoder(decoder_input, en_output)

    dec_att_probs, dec_enc_att_probs = []
    for layer in self.att_layers:
      outputs = layer(decoder_input, emd_inputs, dec_att_mask, dec_enc_att_mask)
      dec_att_probs.append(outputs['dec_att_prob'])
      dec_enc_att_probs.append(outputs['dec_enc_prob'])

    return {'outputs': outputs['outputs'], 'dec_att_prob': dec_att_prob, 'dec_enc_prob': dec_enc_prob}