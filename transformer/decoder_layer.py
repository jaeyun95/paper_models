# -*- coding: utf-8 -*-
"""decoder_layer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1He7cfa5b4EC_zxo3RI-o_SRRP7keexgK
"""

import torch
import torch.nn as nn
import math 

class DecoderLayer(nn.Module):
  def __init__(self):
      super().__init__()

      self.decoder_embedding = MultiHeadAttention()
      self.self_attention = MultiHeadAttention()
      self.layer_norm = nn.LayerNorm()
      self.position_wise = PositionWiseFeedForward()
      self.layer_norm2 = nn.LayerNorm()
      self.layer_norm3 = nn.LayerNorm()

  def forward(self, inputs, encoder_outputs, dec_att_mask, dec_enc_att_mask):
    
    decoder_output, dec_att_prob = self.decoder_embedding(inputs, inputs, inputs, att_mask)
    decoder_output = self.layer_norm(inputs + decoder_output)

    dec_enc_output, dec_enc_prob = self.self_attention(decoder_output, encoder_outputs, encoder_outputs)
    dec_enc_output = self.layer_norm2(decoder_output + dec_enc_output)

    outputs = self.position_wise(dec_enc_output)
    outputs = self.layer_norm3(dec_enc_output + output)

    return {'output': outputs, 'dec_att_prob': dec_att_prob, 'dec_enc_prob': dec_enc_prob}